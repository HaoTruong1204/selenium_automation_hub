# modules/dashboard.py

from PyQt5.QtWidgets import (
    QWidget, QGroupBox, QFrame, QLabel, QVBoxLayout, QHBoxLayout, QGridLayout,
    QPushButton, QTableWidget, QTableWidgetItem, QHeaderView, QProgressBar, QSizePolicy,
    QTabWidget, QListWidget, QListWidgetItem, QTextEdit, QTextBrowser, QSplitter, QMessageBox,
    QScrollArea, QCheckBox
)
from PyQt5.QtGui import QFont, QPixmap, QIcon, QBrush, QColor, QDesktopServices
from PyQt5.QtCore import Qt, QSize, QTimer, pyqtSignal, QUrl
import os
import time
import psutil
from datetime import datetime

class StatCard(QFrame):
    """
    Card hi·ªÉn th·ªã th√¥ng s·ªë th·ªëng k√™ (StatCard).
    M√†u s·∫Øc, font, v.v... c√≥ th·ªÉ ƒë∆∞·ª£c ƒëi·ªÅu khi·ªÉn qua QSS ƒë·ªÉ ƒë·ªìng nh·∫•t giao di·ªán.
    """
    def __init__(self, title, value, icon_path=None, color="#0d6efd", parent=None):
        super().__init__(parent)
        self.setFrameShape(QFrame.StyledPanel)
        self.setFrameShadow(QFrame.Raised)
        self.setObjectName("statCard")
        # ƒê·∫∑t property ƒë·ªÉ QSS c√≥ th·ªÉ ƒëi·ªÅu khi·ªÉn m√†u n·ªÅn/gradient
        self.setProperty("cardColor", color)
        
        layout = QVBoxLayout(self)
        layout.setContentsMargins(15, 10, 15, 10)
        
        # Header layout ch·ª©a icon v√† ti√™u ƒë·ªÅ
        header_layout = QHBoxLayout()
        if icon_path:
            self.icon_label = QLabel()
            # Ki·ªÉm tra xem file icon c√≥ t·ªìn t·∫°i kh√¥ng
            if os.path.exists(icon_path):
                pixmap = QPixmap(icon_path).scaled(40, 40, Qt.KeepAspectRatio, Qt.SmoothTransformation)
                self.icon_label.setPixmap(pixmap)
            self.icon_label.setObjectName("statIcon")
            header_layout.addWidget(self.icon_label)
        
        self.title_label = QLabel(title)
        self.title_label.setObjectName("statTitle")
        self.title_label.setFont(QFont("Segoe UI", 14, QFont.Bold))
        header_layout.addWidget(self.title_label)
        header_layout.addStretch()
        layout.addLayout(header_layout)
        
        # Gi√° tr·ªã th·ªëng k√™
        self.value_label = QLabel(str(value))
        self.value_label.setObjectName("statValue")
        self.value_label.setFont(QFont("Segoe UI", 24, QFont.Bold))
        layout.addWidget(self.value_label, alignment=Qt.AlignLeft)
        layout.addStretch()
    
    def update_value(self, new_value):
        """C·∫≠p nh·∫≠t gi√° tr·ªã hi·ªÉn th·ªã tr√™n card."""
        self.value_label.setText(str(new_value))

class TrendingTopicItem(QWidget):
    """
    Widget hi·ªÉn th·ªã th√¥ng tin v·ªÅ m·ªôt ch·ªß ƒë·ªÅ trending
    """
    def __init__(self, trend_data, parent=None):
        super().__init__(parent)
        self.trend_data = trend_data
        self.init_ui()
        
    def init_ui(self):
        layout = QVBoxLayout(self)
        layout.setContentsMargins(10, 15, 10, 15)
        layout.setSpacing(8)
        
        # Title with rank indicator
        title_layout = QHBoxLayout()
        
        rank = QLabel(f"#{self.trend_data['id']}")
        rank.setStyleSheet("font-weight: bold; color: #0d6efd; min-width: 30px;")
        title_layout.addWidget(rank)
        
        title = QLabel(self.trend_data['title'])
        title.setFont(QFont("Segoe UI", 12, QFont.Bold))
        title.setWordWrap(True)
        title_layout.addWidget(title)
        
        layout.addLayout(title_layout)
        
        # Traffic info
        traffic_layout = QHBoxLayout()
        traffic_icon = QLabel("üî•")
        traffic_layout.addWidget(traffic_icon)
        
        traffic = QLabel(self.trend_data.get('traffic', 'Unknown'))
        traffic.setStyleSheet("color: #dc3545;")
        traffic_layout.addWidget(traffic)
        
        traffic_layout.addStretch()
        
        source = QLabel(self.trend_data.get('source', 'Unknown source'))
        source.setFont(QFont("Segoe UI", 9, weight=QFont.Normal, italic=True))
        source.setStyleSheet("color: #6c757d;")
        traffic_layout.addWidget(source)
        
        layout.addLayout(traffic_layout)
        
        # Description if available
        if 'description' in self.trend_data and self.trend_data['description']:
            desc = QLabel(self.trend_data['description'])
            desc.setWordWrap(True)
            desc.setStyleSheet("color: #6c757d; margin-top: 5px;")
            layout.addWidget(desc)
        
        # Actions
        actions_layout = QHBoxLayout()
        
        view_btn = QPushButton("View Details")
        view_btn.setStyleSheet("""
            QPushButton {
                background-color: #0d6efd;
                color: white;
                border: none;
                border-radius: 4px;
                padding: 5px 10px;
            }
            QPushButton:hover {
                background-color: #0b5ed7;
            }
        """)
        view_btn.clicked.connect(self.view_details)
        actions_layout.addWidget(view_btn)
        
        create_content_btn = QPushButton("Create Content")
        create_content_btn.setObjectName("create_content_btn")
        create_content_btn.setStyleSheet("""
            QPushButton {
                background-color: #198754;
                color: white;
                border: none;
                border-radius: 4px;
                padding: 5px 10px;
            }
            QPushButton:hover {
                background-color: #157347;
            }
        """)
        create_content_btn.clicked.connect(self.create_content)
        actions_layout.addWidget(create_content_btn)
        
        layout.addLayout(actions_layout)
        
        # Add a separator line
        line = QFrame()
        line.setFrameShape(QFrame.HLine)
        line.setFrameShadow(QFrame.Sunken)
        line.setStyleSheet("background-color: #dee2e6; margin-top: 10px;")
        layout.addWidget(line)
        
        self.setStyleSheet("""
            QWidget {
                background-color: #f8f9fa;
                border-radius: 8px;
            }
            QWidget:hover {
                background-color: #e9ecef;
            }
        """)
        
    def view_details(self):
        if 'link' in self.trend_data and self.trend_data['link']:
            QDesktopServices.openUrl(QUrl(self.trend_data['link']))
            
    def create_content(self):
        # Signal that we want to create content from this trend
        # This will be connected to a handler in the parent widget
        parent = self.parent()
        while parent and not isinstance(parent, DashboardWidget):
            parent = parent.parent()
            
        if parent and isinstance(parent, DashboardWidget):
            parent.request_content_creation(self.trend_data)

class TrendingWidget(QWidget):
    """Widget to display trending topics"""
    create_content_signal = pyqtSignal(dict)  # Signal when a content creation is requested

    def __init__(self, parent=None):
        super().__init__(parent)
        self.init_ui()

    def init_ui(self):
        layout = QVBoxLayout(self)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(0)

        # Header with refresh button
        header_layout = QHBoxLayout()
        
        title = QLabel("Trending Topics")
        title.setFont(QFont("Segoe UI", 14, QFont.Bold))
        header_layout.addWidget(title)
        
        header_layout.addStretch()
        
        refresh_btn = QPushButton("Refresh")
        refresh_btn.setStyleSheet("""
            QPushButton {
                background-color: #0d6efd;
                color: white;
                border: none;
                border-radius: 4px;
                padding: 5px 15px;
            }
            QPushButton:hover {
                background-color: #0b5ed7;
            }
        """)
        refresh_btn.clicked.connect(self.on_refresh_clicked)
        header_layout.addWidget(refresh_btn)
        
        layout.addLayout(header_layout)

        # Source selection
        source_layout = QHBoxLayout()
        
        source_label = QLabel("Source:")
        source_layout.addWidget(source_label)
        
        self.google_trends_checkbox = QCheckBox("Google Trends")
        self.google_trends_checkbox.setChecked(True)
        source_layout.addWidget(self.google_trends_checkbox)
        
        self.facebook_trends_checkbox = QCheckBox("Facebook")
        self.facebook_trends_checkbox.setChecked(True)
        source_layout.addWidget(self.facebook_trends_checkbox)
        
        source_layout.addStretch()
        
        layout.addLayout(source_layout)
        
        # Scroll area for trending items
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setFrameShape(QFrame.NoFrame)
        
        self.trends_container = QWidget()
        self.trends_layout = QVBoxLayout(self.trends_container)
        self.trends_layout.setContentsMargins(0, 0, 0, 0)
        self.trends_layout.setSpacing(10)
        self.trends_layout.addStretch()
        
        scroll_area.setWidget(self.trends_container)
        layout.addWidget(scroll_area)
        
    def on_refresh_clicked(self):
        # This would be connected to the dashboard's refresh_trends method
        parent = self.parent()
        while parent and not isinstance(parent, DashboardWidget):
            parent = parent.parent()
            
        if parent and isinstance(parent, DashboardWidget):
            parent.refresh_trends()
            
    def add_trending_topic(self, topic_data):
        """Add a trending topic item to the list"""
        # Create the trend item widget
        item_widget = TrendingTopicItem(topic_data)
        
        # Connect the create_content method to our signal
        # Use a lambda to pass along the topic data
        item_widget.create_content_btn = item_widget.findChild(QPushButton, "create_content_btn")
        if item_widget.create_content_btn:
            item_widget.create_content_btn.clicked.connect(
                lambda: self.create_content_signal.emit(topic_data)
            )
        
        # Insert at the top (before the stretch)
        self.trends_layout.insertWidget(self.trends_layout.count() - 1, item_widget)
        
    def clear_topics(self):
        """Clear all trending topics"""
        # Remove all widgets except the stretch at the end
        while self.trends_layout.count() > 1:
            item = self.trends_layout.takeAt(0)
            if item.widget():
                item.widget().deleteLater()

class ContentWidget(QWidget):
    """
    Widget hi·ªÉn th·ªã n·ªôi dung ƒë√£ t·∫°o v√† cho ph√©p ƒëƒÉng
    """
    post_content_signal = pyqtSignal(dict, str)  # Ph√°t t√≠n hi·ªáu khi n√∫t ƒëƒÉng b√†i ƒë∆∞·ª£c nh·∫•n

    def __init__(self, parent=None):
        super().__init__(parent)
        self.current_content = None
        self.init_ui()

    def init_ui(self):
        layout = QVBoxLayout(self)
        
        # Ti√™u ƒë·ªÅ
        title_layout = QHBoxLayout()
        self.title_label = QLabel("N·ªôi dung ƒë√£ t·∫°o")
        self.title_label.setFont(QFont("Segoe UI", 14, QFont.Bold))
        title_layout.addWidget(self.title_label)
        title_layout.addStretch()
        layout.addLayout(title_layout)
        
        # Khu v·ª±c hi·ªÉn th·ªã n·ªôi dung
        content_layout = QHBoxLayout()
        
        # Panel n·ªôi dung tr√°i (ti√™u ƒë·ªÅ, n·ªôi dung)
        left_panel = QWidget()
        left_layout = QVBoxLayout(left_panel)
        
        # Ti√™u ƒë·ªÅ n·ªôi dung
        self.content_title_label = QLabel("Ti√™u ƒë·ªÅ:")
        self.content_title_label.setFont(QFont("Segoe UI", 12, QFont.Bold))
        self.content_title = QTextEdit()
        self.content_title.setMaximumHeight(60)
        self.content_title.setPlaceholderText("Ti√™u ƒë·ªÅ n·ªôi dung s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y...")
        
        # N·ªôi dung ch√≠nh
        self.content_body_label = QLabel("N·ªôi dung:")
        self.content_body_label.setFont(QFont("Segoe UI", 12, QFont.Bold))
        self.content_body = QTextEdit()
        self.content_body.setPlaceholderText("N·ªôi dung ch√≠nh s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y...")
        
        left_layout.addWidget(self.content_title_label)
        left_layout.addWidget(self.content_title)
        left_layout.addWidget(self.content_body_label)
        left_layout.addWidget(self.content_body)
        
        # Panel n·ªôi dung ph·∫£i (hashtags, ngu·ªìn)
        right_panel = QWidget()
        right_layout = QVBoxLayout(right_panel)
        
        # Hashtags
        self.hashtags_label = QLabel("Hashtags:")
        self.hashtags_label.setFont(QFont("Segoe UI", 12, QFont.Bold))
        self.hashtags_list = QListWidget()
        self.hashtags_list.setMaximumHeight(150)
        
        # Th√¥ng tin ngu·ªìn
        self.source_label = QLabel("Th√¥ng tin ngu·ªìn:")
        self.source_label.setFont(QFont("Segoe UI", 12, QFont.Bold))
        self.source_info = QTextBrowser()
        self.source_info.setMaximumHeight(100)
        
        right_layout.addWidget(self.hashtags_label)
        right_layout.addWidget(self.hashtags_list)
        right_layout.addWidget(self.source_label)
        right_layout.addWidget(self.source_info)
        right_layout.addStretch()
        
        # Th√™m panels v√†o layout
        splitter = QSplitter(Qt.Horizontal)
        splitter.addWidget(left_panel)
        splitter.addWidget(right_panel)
        splitter.setSizes([700, 300])  # T·ª∑ l·ªá k√≠ch th∆∞·ªõc ban ƒë·∫ßu
        
        content_layout.addWidget(splitter)
        layout.addLayout(content_layout)
        
        # N√∫t ƒëƒÉng b√†i
        action_layout = QHBoxLayout()
        
        self.post_now_btn = QPushButton("ƒêƒÉng ngay")
        self.post_now_btn.setIcon(QIcon("resources/icons/upload.png"))
        self.post_now_btn.clicked.connect(self.post_now)
        
        self.schedule_post_btn = QPushButton("L·∫≠p l·ªãch ƒëƒÉng")
        self.schedule_post_btn.setIcon(QIcon("resources/icons/calendar.png"))
        self.schedule_post_btn.clicked.connect(self.schedule_post)
        
        self.clear_btn = QPushButton("X√≥a n·ªôi dung")
        self.clear_btn.setIcon(QIcon("resources/icons/delete.png"))
        self.clear_btn.clicked.connect(self.clear_content)
        
        action_layout.addWidget(self.post_now_btn)
        action_layout.addWidget(self.schedule_post_btn)
        action_layout.addStretch()
        action_layout.addWidget(self.clear_btn)
        
        layout.addLayout(action_layout)
        
    def display_content(self, content):
        """
        Hi·ªÉn th·ªã n·ªôi dung ƒë√£ t·∫°o
        """
        if not content:
            return
            
        self.current_content = content
        
        # Hi·ªÉn th·ªã ti√™u ƒë·ªÅ
        self.content_title.setText(content.get("title", ""))
        
        # Hi·ªÉn th·ªã n·ªôi dung
        self.content_body.setText(content.get("content", ""))
        
        # Hi·ªÉn th·ªã hashtags
        self.hashtags_list.clear()
        for hashtag in content.get("hashtags", []):
            self.hashtags_list.addItem(hashtag)
            
        # Hi·ªÉn th·ªã th√¥ng tin ngu·ªìn
        source_text = f"Ngu·ªìn: {content.get('source_trend', 'Kh√¥ng r√µ')}\n"
        source_text += f"Th·ªùi gian t·∫°o: {content.get('created_time', datetime.now().strftime('%Y-%m-%d %H:%M:%S'))}"
        self.source_info.setText(source_text)
        
    def clear_content(self):
        """
        X√≥a n·ªôi dung hi·ªán t·∫°i
        """
        self.current_content = None
        self.content_title.clear()
        self.content_body.clear()
        self.hashtags_list.clear()
        self.source_info.clear()

    def post_now(self):
        """Ki·ªÉm tra content tr∆∞·ªõc khi ph√°t t√≠n hi·ªáu post_content_signal"""
        if self.current_content:
            self.post_content_signal.emit(self.current_content, "now")
        else:
            # Hi·ªÉn th·ªã th√¥ng b√°o n·∫øu kh√¥ng c√≥ n·ªôi dung
            QMessageBox.warning(self, "Kh√¥ng c√≥ n·ªôi dung", "Vui l√≤ng t·∫°o n·ªôi dung tr∆∞·ªõc khi ƒëƒÉng.")
            
    def schedule_post(self):
        """Ki·ªÉm tra content tr∆∞·ªõc khi ph√°t t√≠n hi·ªáu post_content_signal"""
        if self.current_content:
            self.post_content_signal.emit(self.current_content, "schedule")
        else:
            # Hi·ªÉn th·ªã th√¥ng b√°o n·∫øu kh√¥ng c√≥ n·ªôi dung
            QMessageBox.warning(self, "Kh√¥ng c√≥ n·ªôi dung", "Vui l√≤ng t·∫°o n·ªôi dung tr∆∞·ªõc khi l·∫≠p l·ªãch ƒëƒÉng.")

class DashboardWidget(QWidget):
    """
    Widget Dashboard hi·ªÉn th·ªã:
      - 4 th·∫ª th·ªëng k√™ (StatCard) b·ªë tr√≠ d·∫°ng 2x2
      - Khu v·ª±c "C√°c Task g·∫ßn ƒë√¢y" v·ªõi b·∫£ng Task v√† 2 n√∫t "L√†m m·ªõi", "Ch·∫°y Task m·ªõi"
      - Ti·∫øn tr√¨nh CPU/Memory
      - *M·ªöI* Th√™m c√°c tab ƒë·ªÉ hi·ªÉn th·ªã trends v√† n·ªôi dung ƒë√£ t·∫°o
    """
    # Signal ƒë·ªÉ y√™u c·∫ßu l·∫•y trends
    get_trends_signal = pyqtSignal(str)  # Lo·∫°i trend: "google" ho·∫∑c "facebook"
    
    # Signal ƒë·ªÉ y√™u c·∫ßu t·∫°o n·ªôi dung t·ª´ trend
    create_content_signal = pyqtSignal(dict, str)  # Trend data v√† content_type
    
    # Signal ƒë·ªÉ y√™u c·∫ßu ƒëƒÉng b√†i
    post_content_signal = pyqtSignal(dict, str)  # Content data v√† post_type
    
    # Signal ƒë·ªÉ c·∫≠p nh·∫≠t khi c√≥ stats m·ªõi
    update_stats_signal = pyqtSignal(dict)
    
    # Signal ƒë·ªÉ chuy·ªÉn trang
    navigate_signal = pyqtSignal(int)
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.init_ui()
        
        # D·ªØ li·ªáu th·ªëng k√™
        self.stats = {
            "task_count": 0,
            "success_rate": 0,
            "active_proxies": 0,
            "script_count": 0
        }
        
        # Timer c·∫≠p nh·∫≠t th·ªëng k√™ v√† CPU/Memory (m·ªói 5 gi√¢y)
        self.update_timer = QTimer(self)
        self.update_timer.timeout.connect(self.update_system_stats)
        self.update_timer.start(5000)

    def init_ui(self):
        # √Åp d·ª•ng m·ªôt stylesheet ƒë∆°n gi·∫£n ƒë·ªÉ QGroupBox c√≥ vi·ªÅn v√† ti√™u ƒë·ªÅ nh·∫π nh√†ng
        self.setStyleSheet("""
        QGroupBox#tasksBox {
            border: 1px solid #ccc;
            border-radius: 6px;
            margin-top: 10px;
            font: 15px "Segoe UI";
            color: #2c3e50;
        }
        QGroupBox#tasksBox::title {
            subcontrol-origin: margin;
            subcontrol-position: top left;
            background-color: transparent;
            margin-left: 10px;
            margin-top: 2px;
            padding: 0 5px;
            font: bold 14px "Segoe UI";
        }
        QTabWidget::pane {
            border: 1px solid #ccc;
            border-radius: 6px;
                background-color: white;
            padding: 5px;
        }
        QTabBar::tab {
            background: #f1f1f1; 
            border: 1px solid #ccc;
            border-bottom-color: white;
            border-top-left-radius: 4px;
            border-top-right-radius: 4px;
            min-width: 100px;
            padding: 5px;
            font: 12px "Segoe UI";
        }
        QTabBar::tab:selected {
            background: white;
            border-bottom-color: white;
                font-weight: bold;
            }
        """)

        # Layout t·ªïng th·ªÉ
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(20, 20, 20, 20)
        main_layout.setSpacing(25)
        
        # Ti√™u ƒë·ªÅ Dashboard
        title_panel = QFrame()
        title_panel.setObjectName("titlePanel")
        title_layout = QVBoxLayout(title_panel)
        
        self.dashboard_title = QLabel("Dashboard")
        self.dashboard_title.setObjectName("dashboardTitle")
        self.dashboard_title.setFont(QFont("Segoe UI", 24, QFont.Bold))
        self.dashboard_title.setAlignment(Qt.AlignCenter)
        
        title_layout.addWidget(self.dashboard_title)
        main_layout.addWidget(title_panel)
        
        # L∆∞·ªõi c√°c StatCard (2 x 2)
        stats_layout = QGridLayout()
        stats_layout.setSpacing(15)
        
        self.task_card = StatCard("T·ªïng s·ªë Task", "0", "resources/icons/tasks.png", "#0d6efd")
        stats_layout.addWidget(self.task_card, 0, 0)
        
        self.success_card = StatCard("T·ª∑ l·ªá th√†nh c√¥ng", "0%", "resources/icons/success.png", "#28a745")
        stats_layout.addWidget(self.success_card, 0, 1)
        
        self.proxy_card = StatCard("Proxy ƒëang ho·∫°t ƒë·ªông", "0", "resources/icons/proxy.png", "#6f42c1")
        stats_layout.addWidget(self.proxy_card, 1, 0)
        
        self.script_card = StatCard("T·ªïng s·ªë Script", "0", "resources/icons/script.png", "#fd7e14")
        stats_layout.addWidget(self.script_card, 1, 1)
        
        main_layout.addLayout(stats_layout)
        
        # Create main tabs
        self.main_tabs = QTabWidget()
        self.main_tabs.setObjectName("mainTabs")
        
        # Tasks tab
        self.tasks_tab = QWidget()
        tasks_layout = QVBoxLayout(self.tasks_tab)
        
        # Tasks table
        self.stats_table = QTableWidget(0, 5)
        self.stats_table.setObjectName("statsTable")
        self.stats_table.setHorizontalHeaderLabels(["Task", "Lo·∫°i", "Th·ªùi gian", "Tr·∫°ng th√°i", "K·∫øt qu·∫£"])
        self.stats_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.stats_table.setAlternatingRowColors(True)
        self.stats_table.setEditTriggers(QTableWidget.NoEditTriggers)
        self.stats_table.setSelectionBehavior(QTableWidget.SelectRows)
        self.stats_table.setMinimumHeight(250)
        
        tasks_layout.addWidget(self.stats_table)
        
        # Buttons
        tool_layout = QHBoxLayout()
        self.refresh_btn = QPushButton("L√†m m·ªõi")
        self.refresh_btn.setObjectName("refresh_btn")
        self.refresh_btn.setIcon(QIcon("resources/icons/refresh.png"))
        self.refresh_btn.clicked.connect(self.refresh_data)
        
        self.run_btn = QPushButton("Ch·∫°y Task m·ªõi")
        self.run_btn.setObjectName("run_btn")
        self.run_btn.setIcon(QIcon("resources/icons/play.png"))
        self.run_btn.clicked.connect(self.run_new_task)
        
        tool_layout.addWidget(self.refresh_btn)
        tool_layout.addWidget(self.run_btn)
        tool_layout.addStretch()
        tasks_layout.addLayout(tool_layout)
        
        # Add trending widget to tabs
        self.trending_widget = TrendingWidget()
        
        # Add content widget to tabs
        self.content_widget = ContentWidget()
        
        # Add tabs
        self.main_tabs.addTab(self.tasks_tab, "C√°c Task g·∫ßn ƒë√¢y")
        self.main_tabs.addTab(self.trending_widget, "Xu h∆∞·ªõng & Trending")
        self.main_tabs.addTab(self.content_widget, "N·ªôi dung")
        
        main_layout.addWidget(self.main_tabs)
        
        # System status section
        status_layout = QHBoxLayout()
        self.status_label = QLabel("T√¨nh tr·∫°ng h·ªá th·ªëng:")
        self.status_label.setObjectName("statusLabel")
        self.status_label.setFont(QFont("Segoe UI", 12))
        
        self.cpu_progress = QProgressBar()
        self.cpu_progress.setObjectName("cpuProgress")
        self.cpu_progress.setRange(0, 100)
        self.cpu_progress.setValue(30)
        self.cpu_progress.setFormat("CPU: %p%")
        
        self.memory_progress = QProgressBar()
        self.memory_progress.setObjectName("memoryProgress")
        self.memory_progress.setRange(0, 100)
        self.memory_progress.setValue(45)
        self.memory_progress.setFormat("Memory: %p%")
        
        status_layout.addWidget(self.status_label)
        status_layout.addWidget(self.cpu_progress)
        status_layout.addWidget(self.memory_progress)
        main_layout.addLayout(status_layout)
        
        # Add sample data
        self.add_sample_tasks()
        self.add_sample_trends()
        self.add_sample_content()

        # Connect signals
        self.trending_widget.create_content_signal.connect(self.request_content_creation)
        self.content_widget.post_content_signal.connect(self.request_post_content)

    def add_sample_tasks(self):
        """
        Th√™m d·ªØ li·ªáu m·∫´u v√†o b·∫£ng "C√°c Task g·∫ßn ƒë√¢y".
        B·∫°n c√≥ th·ªÉ thay th·∫ø b·∫±ng d·ªØ li·ªáu th·ª±c t·∫ø t·ª´ h·ªá th·ªëng.
        """
        sample_data = [
            {"task": "Google Search", "type": "Web Search", "time": "02:30", "status": "Ho√†n th√†nh", "result": "10 k·∫øt qu·∫£"},
            {"task": "Facebook Login", "type": "Authentication", "time": "01:15", "status": "Ho√†n th√†nh", "result": "Th√†nh c√¥ng"},
            {"task": "Shopee Scrape", "type": "Data Collection", "time": "05:45", "status": "T·∫°m d·ª´ng", "result": "42 s·∫£n ph·∫©m"}
        ]
        
        self.stats_table.setRowCount(len(sample_data))
        for row, data in enumerate(sample_data):
            self.stats_table.setItem(row, 0, QTableWidgetItem(data["task"]))
            self.stats_table.setItem(row, 1, QTableWidgetItem(data["type"]))
            self.stats_table.setItem(row, 2, QTableWidgetItem(data["time"]))
            
            status_item = QTableWidgetItem(data["status"])
            # T√¥ m√†u d·ª±a tr√™n tr·∫°ng th√°i
            if data["status"] == "Ho√†n th√†nh":
                status_item.setForeground(QBrush(QColor("#4cd137")))
                status_item.setFont(QFont("Segoe UI", 10, QFont.Bold))
            elif data["status"] == "T·∫°m d·ª´ng":
                status_item.setForeground(QBrush(QColor("#fbc531")))
                status_item.setFont(QFont("Segoe UI", 10, QFont.Bold))
            else:
                status_item.setForeground(QBrush(QColor("#e84118")))
                status_item.setFont(QFont("Segoe UI", 10, QFont.Bold))
            self.stats_table.setItem(row, 3, status_item)
            
            result_item = QTableWidgetItem(data["result"])
            result_item.setForeground(QBrush(QColor("#2c3e50")))
            self.stats_table.setItem(row, 4, result_item)

    def update_system_stats(self):
        """
        C·∫≠p nh·∫≠t th·ªëng k√™ h·ªá th·ªëng (CPU, Memory) t·ª´ th√¥ng tin th·ª±c t·∫ø
        """
        try:
            # C·∫≠p nh·∫≠t CPU
            cpu_percent = psutil.cpu_percent()
            self.cpu_progress.setValue(int(cpu_percent))
            
            # C·∫≠p nh·∫≠t Memory
            memory = psutil.virtual_memory()
            self.memory_progress.setValue(int(memory.percent))
        except:
            # Fallback n·∫øu kh√¥ng th·ªÉ l·∫•y th√¥ng tin h·ªá th·ªëng th·ª±c
            import random
            self.cpu_progress.setValue(random.randint(20, 80))
            self.memory_progress.setValue(random.randint(30, 70))

    def refresh_data(self):
        """C·∫≠p nh·∫≠t s·ªë li·ªáu v√† l√†m m·ªõi danh s√°ch task."""
        self.update_system_stats()
        # N·∫øu c√≥ logic l·∫•y d·ªØ li·ªáu th·ª±c, th√™m v√†o ƒë√¢y

    def run_new_task(self):
        """
        Khi nh·∫•n "Ch·∫°y Task m·ªõi", chuy·ªÉn sang trang Automation.
        """
        # Ph√°t t√≠n hi·ªáu ƒë·ªÉ MainWindow x·ª≠ l√Ω
        self.navigate_signal.emit(1)  # Chuy·ªÉn ƒë·∫øn trang Automation (index 1)
        print("ƒê√£ g·ª≠i t√≠n hi·ªáu navigate_signal ƒë·ªÉ chuy·ªÉn ƒë·∫øn trang Automation")
        
        # C√°ch truy·ªÅn th·ªëng - d·ª± ph√≤ng trong tr∆∞·ªùng h·ª£p t√≠n hi·ªáu kh√¥ng ƒë∆∞·ª£c k·∫øt n·ªëi
        try:
            # T√¨m MainWindow t·ª´ parent hierarchy
            parent = self.parent()
            while parent and not hasattr(parent, 'switch_page'):
                parent = parent.parent()
                
            if parent and hasattr(parent, 'switch_page'):
                parent.switch_page(1)  # Chuy·ªÉn ƒë·∫øn trang Automation
        except Exception as e:
            print(f"L·ªói khi chuy·ªÉn trang: {str(e)}")

    def update_recent_task(self, task_name, task_type, elapsed_time, status, result=""):
        """
        C·∫≠p nh·∫≠t m·ªôt Task m·ªõi v√†o ƒë·∫ßu b·∫£ng.
        """
        self.stats_table.insertRow(0)
        self.stats_table.setItem(0, 0, QTableWidgetItem(task_name))
        self.stats_table.setItem(0, 1, QTableWidgetItem(task_type))
        self.stats_table.setItem(0, 2, QTableWidgetItem(elapsed_time))
        
        status_item = QTableWidgetItem(status)
        if status == "Ho√†n th√†nh":
            status_item.setForeground(QBrush(QColor("#28a745")))
        elif status == "ƒêang ch·∫°y":
            status_item.setForeground(QBrush(QColor("#0d6efd")))
        elif status == "T·∫°m d·ª´ng":
            status_item.setForeground(QBrush(QColor("#ffc107")))
        else:
            status_item.setForeground(QBrush(QColor("#dc3545")))
        self.stats_table.setItem(0, 3, status_item)
        self.stats_table.setItem(0, 4, QTableWidgetItem(result))
        
        # Gi·ªØ t·ªëi ƒëa 10 d√≤ng m·ªõi nh·∫•t
        if self.stats_table.rowCount() > 10:
            self.stats_table.removeRow(10)
        
        # TƒÉng ƒë·∫øm task
        self.stats["task_count"] += 1
        self.task_card.update_value(self.stats["task_count"])
        
    def update_stat_cards(self, stats):
        """
        C·∫≠p nh·∫≠t c√°c th·∫ª th·ªëng k√™ t·ª´ d·ªØ li·ªáu th·ª±c t·∫ø
        """
        if "task_count" in stats:
            self.task_card.update_value(stats["task_count"])
            self.stats["task_count"] = stats["task_count"]
            
        if "success_rate" in stats:
            self.success_card.update_value(f"{stats['success_rate']}%")
            self.stats["success_rate"] = stats["success_rate"]
            
        if "active_proxies" in stats:
            self.proxy_card.update_value(stats["active_proxies"])
            self.stats["active_proxies"] = stats["active_proxies"]
            
        if "script_count" in stats:
            self.script_card.update_value(stats["script_count"])
            self.stats["script_count"] = stats["script_count"]
            
    def add_trending_topics(self, topics, source="google"):
        """
        Th√™m danh s√°ch ch·ªß ƒë·ªÅ ƒëang trending v√†o widget
        """
        if not topics:
            return
            
        try:
            self.log(f"ƒêang c·∫≠p nh·∫≠t {len(topics)} xu h∆∞·ªõng t·ª´ {source}...")
            
            # X√≥a d·ªØ li·ªáu c≈© n·∫øu c√≥
            if source == "google":
                self.trending_widget.clear_topics()
            elif source == "facebook":
                self.trending_widget.clear_topics()
            else:
                # N·∫øu source kh√¥ng r√µ r√†ng, x√≥a t·∫•t c·∫£
                self.trending_widget.clear_topics()
                
            # Ki·ªÉm tra ƒë·ªãnh d·∫°ng d·ªØ li·ªáu
            for topic in topics:
                if not isinstance(topic, dict):
                    self.log(f"‚ö†Ô∏è B·ªè qua d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá: {topic}")
                    continue
                    
                # Chu·∫©n h√≥a d·ªØ li·ªáu topic
                if source == "google" and "source" not in topic:
                    topic["source"] = "Google Trends"
                elif source == "facebook" and "source" not in topic:
                    topic["source"] = "Facebook"
                
                # ƒê·∫£m b·∫£o c√≥ keyword
                if "keyword" not in topic and "title" in topic:
                    topic["keyword"] = topic["title"]
                elif "keyword" not in topic and "text" in topic:
                    topic["keyword"] = topic["text"]
                elif "keyword" not in topic:
                    topic["keyword"] = "Unknown trend"
                
                # Th√™m v√†o widget
                self.trending_widget.add_trending_topic(topic)
            
            self.log(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t {len(topics)} xu h∆∞·ªõng.")
        except Exception as e:
            self.log(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t xu h∆∞·ªõng: {str(e)}")
            # Ghi log l·ªói chi ti·∫øt
            import traceback
            print(f"Error in add_trending_topics: {traceback.format_exc()}")
            
    def refresh_trends(self):
        """
        L√†m m·ªõi danh s√°ch trends t·ª´ Google v√† Facebook
        """
        self.trending_widget.clear_topics()
        self.log("üîÑ ƒêang l√†m m·ªõi xu h∆∞·ªõng...")
        
        # Hi·ªÉn th·ªã th√¥ng b√°o ƒëang t·∫£i
        loading_label = QLabel("ƒêang t·∫£i xu h∆∞·ªõng...")
        loading_label.setAlignment(Qt.AlignCenter)
        loading_label.setStyleSheet("color: #6c757d; font-style: italic;")
        self.trending_widget.trends_layout.insertWidget(0, loading_label)
        
        # G·ª≠i y√™u c·∫ßu l·∫•y xu h∆∞·ªõng
        self.get_trends_signal.emit("google")
        self.get_trends_signal.emit("facebook")
            
    def display_content(self, content):
        """
        Hi·ªÉn th·ªã n·ªôi dung ƒë√£ t·∫°o trong tab n·ªôi dung
        """
        self.content_widget.display_content(content)
        # Chuy·ªÉn ƒë·∫øn tab n·ªôi dung
        self.main_tabs.setCurrentIndex(2)
        
    def request_content_creation(self, trend_data):
        """
        Y√™u c·∫ßu t·∫°o n·ªôi dung t·ª´ m·ªôt trend
        """
        if not trend_data or not isinstance(trend_data, dict):
            self.log("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu xu h∆∞·ªõng ƒë·ªÉ t·∫°o n·ªôi dung")
            return
            
        self.log(f"üìù Y√™u c·∫ßu t·∫°o n·ªôi dung cho: {trend_data.get('keyword', 'Kh√¥ng x√°c ƒë·ªãnh')}")
        
        # Hi·ªÉn th·ªã th√¥ng b√°o ƒëang t·∫°o n·ªôi dung
        self.content_widget.content_title.setPlaceholderText("ƒêang t·∫°o n·ªôi dung...")
        self.content_widget.content_body.setPlaceholderText("Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t...")
        
        # Ph√°t signal y√™u c·∫ßu t·∫°o n·ªôi dung (v·ªõi lo·∫°i n·ªôi dung m·∫∑c ƒë·ªãnh l√† "article")
        self.create_content_signal.emit(trend_data, "article")
        
        # Chuy·ªÉn ƒë·∫øn tab n·ªôi dung
        self.main_tabs.setCurrentIndex(2)
        
    def request_post_content(self, content_data, post_type):
        """
        Y√™u c·∫ßu ƒëƒÉng n·ªôi dung l√™n m·∫°ng x√£ h·ªôi
        """
        if not content_data or not isinstance(content_data, dict):
            self.log("‚ö†Ô∏è Kh√¥ng c√≥ n·ªôi dung ƒë·ªÉ ƒëƒÉng")
            return
            
        self.log(f"üì§ Y√™u c·∫ßu ƒëƒÉng n·ªôi dung: {post_type}")
        
        # Ph√°t signal y√™u c·∫ßu ƒëƒÉng b√†i
        self.post_content_signal.emit(content_data, post_type)
        
    def log(self, message):
        """
        Hi·ªÉn th·ªã message trong console v√† c√≥ th·ªÉ g·ª≠i ƒë·∫øn module logs
        """
        print(f"[Dashboard] {message}")
        # N·∫øu c√≥ k·∫øt n·ªëi v·ªõi LogsWidget, c√≥ th·ªÉ g·ª≠i log ƒë·∫øn ƒë√≥

    def add_sample_trends(self):
        """Add sample trending topics for demonstration"""
        sample_trends = [
            {
                "id": 1,
                "title": "World Cup 2026",
                "traffic": "1M+ searches",
                "description": "2026 FIFA World Cup news and updates",
                "source": "Google Trends",
                "link": "https://www.google.com/search?q=World+Cup+2026"
            },
            {
                "id": 2,
                "title": "#Technology",
                "traffic": "500K+ posts",
                "description": "Latest technology news and innovations",
                "source": "Facebook",
                "link": "https://www.facebook.com/hashtag/technology"
            },
            {
                "id": 3,
                "title": "Climate Change",
                "traffic": "800K+ searches",
                "description": "Global climate initiatives and environmental news",
                "source": "Google Trends",
                "link": "https://www.google.com/search?q=Climate+Change"
            },
            {
                "id": 4,
                "title": "#Entertainment",
                "traffic": "600K+ posts",
                "description": "Entertainment news, movies, and celebrity updates",
                "source": "Facebook",
                "link": "https://www.facebook.com/hashtag/entertainment"
            },
            {
                "id": 5,
                "title": "Crypto Market",
                "traffic": "750K+ searches",
                "description": "Cryptocurrency market trends and analysis",
                "source": "Google Trends",
                "link": "https://www.google.com/search?q=Crypto+Market"
            }
        ]
        
        for trend in sample_trends:
            self.trending_widget.add_trending_topic(trend)

    def add_sample_content(self):
        """
        Th√™m n·ªôi dung m·∫´u v√†o tab n·ªôi dung
        """
        sample_content = {
            "title": "Tr√≠ tu·ªá nh√¢n t·∫°o thay ƒë·ªïi ng√†nh c√¥ng ngh·ªá nh∆∞ th·∫ø n√†o?",
            "content": "Tr√≠ tu·ªá nh√¢n t·∫°o (AI) ƒëang thay ƒë·ªïi ng√†nh c√¥ng ngh·ªá m·ªôt c√°ch s√¢u s·∫Øc. T·ª´ tr·ª£ l√Ω ·∫£o ƒë·∫øn xe t·ª± l√°i, AI ƒëang thay ƒë·ªïi c√°ch ch√∫ng ta t∆∞∆°ng t√°c v·ªõi c√¥ng ngh·ªá.\n\n" +
                       "## T√°c ƒë·ªông c·ªßa AI trong lƒ©nh v·ª±c ph√°t tri·ªÉn ph·∫ßn m·ªÅm\n\n" +
                       "C√°c c√¥ng c·ª• AI nh∆∞ GitHub Copilot ƒëang gi√∫p l·∫≠p tr√¨nh vi√™n t·∫°o ra code nhanh h∆°n v√† hi·ªáu qu·∫£ h∆°n. AI c≈©ng ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ t·ªëi ∆∞u h√≥a c√°c quy tr√¨nh CI/CD.\n\n" +
                       "## AI v√† t∆∞∆°ng lai c·ªßa t·ª± ƒë·ªông h√≥a\n\n" +
                       "T·ª± ƒë·ªông h√≥a l√† m·ªôt trong nh·ªØng lƒ©nh v·ª±c m√† AI ƒëang c√≥ t√°c ƒë·ªông l·ªõn nh·∫•t. T·ª´ vi·ªác t·ª± ƒë·ªông h√≥a c√°c quy tr√¨nh s·∫£n xu·∫•t ƒë·∫øn vi·ªác t·ª± ƒë·ªông h√≥a c√°c t√°c v·ª• vƒÉn ph√≤ng.",
            "hashtags": ["#AI", "#Tr√≠Tu·ªáNh√¢nT·∫°o", "#C√¥ngNgh·ªá", "#T·ª±ƒê·ªôngH√≥a"],
            "source_trend": "Tr√≠ tu·ªá nh√¢n t·∫°o",
            "created_time": datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        }
        
        self.content_widget.display_content(sample_content)
